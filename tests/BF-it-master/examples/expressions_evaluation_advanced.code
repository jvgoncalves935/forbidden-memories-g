int foo() {
    print("----ERROR! This should never be printed!!!----\n");
    return 1;
}

int main() {
	// boolean evaluation is short-circuit
	int x = 5;
	printint(x == 5);

	if (true || x++) {} // x++ is not evaluated
	printint(x == 5);

	if (false && x++) {} // again x++ is not evaluated
	printint(x == 5);

    // similarly,
    if (1 || foo()) print("1"); // foo will never be called
    if (0 && foo()) foo();      // foo will never be called

	// order of evaluation
	// expressions are evaluated left-to-right 
	// in the following example, the left "x++" is evaluated first.
	// it is evaluated as 3, and modifies x to become 4.
	// then the right "x++" is evaluated. it is evaluated to 4 and then x becomes 5.
	// then the addition is being made
	x = 3;
	int y = x++ + x++;
	printint(y == 7);
	printint(x == 5);


	// in the following example, the order is:
	// the first "x++" returns 2 and x becomes 3
	// the second "x++" returns 3 and x becomes 4
	// the third "x++" returns 4 and becomes 5
	// then the expression is evaluated in the standard arithmetic precedence order
	// "second * third + first" = "3 * 4 + 2" = 14
	x = 2;
	y = x++ + x++ * x++;
	printint(y == 14);
	printint(x == 5);


	// it works similarly with assignments (=, +=, *=, etc)
	// (x = 2) is evaluated to 2, and modifies x to becomes 2
	// x++ returns 2 and modifies x to become 3
	// x is evaluated to 3
	// then "second * third + first" = "2 * 3 + 2: = 8
	x = 3;
	y = (x = 2) + x++ * x;
	printint(x == 3);
	printint(y == 8);


	// first operand is evaluated to 6, and x becomes 6
	// second operand is evaluated to 5, and x becomes 5
	x = 3;
	y = (x *= 2) + --x;
	printint(x == 5);
	printint(y == 11);
}
